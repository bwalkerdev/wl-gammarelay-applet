use clap::Parser;
use thiserror::Error;
use zbus::{dbus_proxy, Connection};
slint::include_modules!();

#[derive(Error, Debug)]
pub enum AppletError {
    #[error("slint::PlatformError")]
    SlintPlatform(#[from] slint::PlatformError),

    #[error("zbus::Error")]
    Zbus(#[from] zbus::Error),

    #[error("unknown AppletError")]
    Unknown,
}

#[derive(Parser)]
#[command(author, version, about, long_about = None)]
struct Args {
    /// Hides switch that controls Invert
    #[arg(short = 'i', long, default_value_t = false)]
    hide_invert: bool,
    /// Hides slider that controls Temperature
    #[arg(short = 't', long, default_value_t = false)]
    hide_temperature: bool,
    /// Hides slider that controls Brightness
    #[arg(short = 'b', long, default_value_t = false)]
    hide_brightness: bool,
    /// Hides slider that controls Gamma
    #[arg(short = 'g', long, default_value_t = false)]
    hide_gamma: bool,
    /// Hides "speech bubble" caret at bottom of applet
    #[arg(short = 'c', long, default_value_t = false)]
    hide_caret: bool,
    /// Hides text labels of control widgets
    #[arg(short = 'l', long, default_value_t = false)]
    hide_labels: bool,
    /// Set applet window outer padding
    #[arg(short = 'p', long, default_value_t = 8)]
    outer_padding: usize,
    /// Set applet window width (horizontal)
    #[arg(short = 'x', long, default_value_t = 100)]
    window_width: usize,
    /// Set applet window height (vertical)
    #[arg(short = 'y', long, default_value_t = 220)]
    window_height: usize,
}

// # DBus interface proxy for: `rs.wl.gammarelay`
// Source: `Interface '/' from service 'rs.wl-gammarelay' on session bus`.
// This block was (mostly) generated by `zbus-xmlgen` `3.1.1` from DBus introspection data.
#[dbus_proxy(
    interface = "rs.wl.gammarelay",
    default_service = "rs.wl-gammarelay",
    default_path = "/"
)]
trait GammaRelay {
    /// ToggleInverted method
    fn toggle_inverted(&self) -> zbus::Result<()>;
    /// UpdateBrightness method
    fn update_brightness(&self, delta_brightness: f64) -> zbus::Result<()>;
    /// UpdateGamma method
    fn update_gamma(&self, delta_gamma: f64) -> zbus::Result<()>;
    /// UpdateTemperature method
    fn update_temperature(&self, delta_temp: i16) -> zbus::Result<()>;
    /// Brightness property
    #[dbus_proxy(property)]
    fn brightness(&self) -> zbus::Result<f64>;
    /// Gamma property
    #[dbus_proxy(property)]
    fn gamma(&self) -> zbus::Result<f64>;
    /// Inverted property
    #[dbus_proxy(property)]
    fn inverted(&self) -> zbus::Result<bool>;
    /// Temperature property
    #[dbus_proxy(property)]
    fn temperature(&self) -> zbus::Result<u16>;
}

// remapping values from low1-high1 to low2-high2 is done like
// low2 + (value - low1) * (high2 - low2) / (high1 - low1)

// 1000 - 8000 to
//  0.0 - 1.0
fn dbus_temperature_to_ui_value(dbus_value: u16) -> f32 {
    (dbus_value as f32 - 1000.0) * (1.0 / 7000.0)
}
// 0.2 - 1.0 to
// 0.0 - 1.0
fn dbus_brightness_to_ui_value(dbus_value: f64) -> f32 {
    ((dbus_value - 0.2) / 0.8) as f32
}

// 0.5 - 1.5 to
// 0.0 - 1.0
fn dbus_gamma_to_ui_value(dbus_value: f64) -> f32 {
    (dbus_value - 0.5) as f32
}

//  0.0 - 1.0 to
// 1000 - 8000
fn ui_temperature_to_dbus_value(ui_value: f32) -> i16 {
    (1000.0 + ui_value * 7000.0) as i16
}
// 0.0 - 1.0 to
// 0.2 - 1.0
fn ui_brightness_to_dbus_value(ui_value: f32) -> f64 {
    ui_value as f64 * 0.8 + 0.2
}
// 0.0 - 1.0 to
// 0.5 - 1.5
fn ui_gamma_to_dbus_value(ui_value: f32) -> f64 {
    ui_value as f64 + 0.5
}

#[tokio::main]
async fn main() -> Result<(), AppletError> {
    let args = Args::parse();
    let app = WlGammaRelayApplet::new()?;

    // initialize window state and ui values
    {
        let connection = Connection::session().await?;
        let proxy: GammaRelayProxy = GammaRelayProxy::new(&connection).await?;

        // initialize startup parameters based on arguments
        app.global::<Startup>().set_show_invert(!(args.hide_invert));
        app.global::<Startup>()
            .set_show_temperature(!(args.hide_temperature));
        app.global::<Startup>()
            .set_show_brightness(!(args.hide_brightness));
        app.global::<Startup>().set_show_gamma(!(args.hide_gamma));
        app.global::<Startup>().set_show_caret(!args.hide_caret);
        app.global::<Startup>().set_show_labels(!args.hide_labels);
        app.global::<Startup>()
            .set_outer_padding(args.outer_padding as i32);
        app.global::<Startup>()
            .set_window_height(args.window_height as i32);
        app.global::<Startup>()
            .set_window_width(args.window_width as i32);

        // initialize parameter ui values based on current gammarelay state
        app.global::<Parameters>()
            .set_invert(proxy.inverted().await?);
        app.global::<Parameters>()
            .set_temperature(dbus_temperature_to_ui_value(proxy.temperature().await?));
        app.global::<Parameters>()
            .set_brightness(dbus_brightness_to_ui_value(proxy.brightness().await?));
        app.global::<Parameters>()
            .set_gamma(dbus_gamma_to_ui_value(proxy.gamma().await?));
    }

    // create tick binding which runs opacity management (slint-side)
    // and also hides (which destroys) the window when done fading out.
    {
        let app_weak = app.as_weak();
        app.on_tick(move |delta| {
            let binding = app_weak.unwrap();
            binding.invoke_manage_opacity(delta);
            let startup_fade_in = binding.global::<Startup>().get_fade_in();
            let current_opacity = binding.global::<Parameters>().get_window_opacity();
            if !startup_fade_in && current_opacity < 0.0 {
                let _ = binding.window().hide();
            }
        });
    }

    // create a timer that invokes tick on the main window.
    let timer = slint::Timer::default();
    {
        const TICK_DELTA: u64 = 20;
        let app_window_weak = app.as_weak();
        timer.start(
            slint::TimerMode::Repeated,
            std::time::Duration::from_millis(TICK_DELTA),
            move || {
                let main_window = app_window_weak.unwrap();
                main_window.invoke_tick(TICK_DELTA as f32 / 1000.0);
            },
        );
    }

    // pass invert toggle state over dbus
    {
        app.global::<Parameters>()
            .on_invert_changed(move |_invert_state| {
                slint::spawn_local(async move {
                    let connection = Connection::session().await.expect("rust: get session");
                    let proxy: GammaRelayProxy = GammaRelayProxy::new(&connection)
                        .await
                        .expect("rust: get proxy");
                    proxy
                        .toggle_inverted()
                        .await
                        .expect("rust: expect set inverted");
                })
                .unwrap();
            });
    }

    // pass slider movement delta over dbus
    {
        app.global::<Parameters>()
            .on_slider_changed(move |name, prev_value, value| {
                slint::spawn_local(async move {
                    let connection = Connection::session().await.expect("rust: get session");
                    let proxy: GammaRelayProxy = GammaRelayProxy::new(&connection)
                        .await
                        .expect("rust: get proxy");

                    match &*name {
                        "temperature" => {
                            proxy
                                .update_temperature(
                                    ui_temperature_to_dbus_value(value)
                                        - ui_temperature_to_dbus_value(prev_value),
                                )
                                .await
                                .expect("rust: expect set temperature");
                        }
                        "brightness" => {
                            proxy
                                .update_brightness(
                                    ui_brightness_to_dbus_value(value)
                                        - ui_brightness_to_dbus_value(prev_value),
                                )
                                .await
                                .expect("rust: expect set brightness");
                        }
                        "gamma" => {
                            proxy
                                .update_gamma(
                                    ui_gamma_to_dbus_value(value)
                                        - ui_gamma_to_dbus_value(prev_value),
                                )
                                .await
                                .expect("rust: expect set brightness");
                        }
                        _ => {}
                    }
                })
                .unwrap();
            });
    }

    // run the app
    Ok(app.run()?)
}
